import { NextRequest, NextResponse } from 'next/server'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
export const dynamic = 'force-static'
export const revalidate = false

export async function GET(request: NextRequest) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –¥–ª—è Telegram
	const { searchParams } = new URL(request.url)
	const token = searchParams.get('token')
	
	if (token === process.env.TELEGRAM_BOT_TOKEN) {
		return NextResponse.json({ status: 'ok' })
	}
	
	return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
}

export async function POST(request: NextRequest) {
	try {
		const { phone, privacyConsent, consentDate } = await request.json()

		if (!phone) {
			return NextResponse.json(
				{ error: '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
				{ status: 400 }
			)
		}

		if (!privacyConsent) {
			return NextResponse.json(
				{ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' },
				{ status: 400 }
			)
		}

		// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
		const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
		const CHAT_ID = process.env.TELEGRAM_CHAT_ID

		if (!BOT_TOKEN || !CHAT_ID) {
			console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram')
			console.error('BOT_TOKEN:', BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
			console.error('CHAT_ID:', CHAT_ID ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
			return NextResponse.json(
				{ error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏' },
				{ status: 500 }
			)
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–≥–ª–∞—Å–∏–∏
		const message = `üöó *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*

üìû –¢–µ–ª–µ—Ñ–æ–Ω: \`${phone}\`
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Vladivostok' })}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: –°–∞–π—Ç SCHMIDT Cars
‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î: ${privacyConsent ? '–î–∞' : '–ù–µ—Ç'}
üìÖ –î–∞—Ç–∞ —Å–æ–≥–ª–∞—Å–∏—è: ${consentDate ? new Date(consentDate).toLocaleString('ru-RU', { timeZone: 'Asia/Vladivostok' }) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

_–ó–∞—è–≤–∫–∞ –Ω–∞ –í–≠–§ 2025_`

		console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', { 
			chat_id: CHAT_ID, 
			message,
			privacyConsent,
			consentDate 
		})

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		console.log('–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', {
			phone: phone,
			privacyConsent: privacyConsent,
			consentDate: consentDate,
			timestamp: new Date().toISOString(),
			ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown'
		})

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
		const telegramResponse = await fetch(
			`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
			{
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					chat_id: CHAT_ID,
					text: message,
					parse_mode: 'Markdown',
					disable_web_page_preview: true,
				}),
			}
		)

		if (!telegramResponse.ok) {
			const errorData = await telegramResponse.json()
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', errorData)
			return NextResponse.json(
				{ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', details: errorData },
				{ status: 500 }
			)
		}

		const responseData = await telegramResponse.json()
		console.log('–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:', responseData)

		return NextResponse.json({ success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' })
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
		return NextResponse.json(
			{ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
			{ status: 500 }
		)
	}
} 