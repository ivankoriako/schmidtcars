import { 
	Car, 
	CarsData, 
	CarCategory, 
	CarClass, 
	FuelType, 
	TransmissionType, 
	PriceRange,
	createPrice,
	createYear,
	createSeats,
	CarsStatistics,
	CacheOptions
} from '@/types'

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { CarClass, CarCategory, FuelType, TransmissionType, PriceRange }

// –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
const carsData: Car[] = [
	// üöê –ö–û–ú–§–û–†–¢
	{
		id: 'honda-stepwagon',
		name: 'Honda StepWagon 2023',
		class: '–ö–æ–º—Ñ–æ—Ä—Ç',
		engine: '1.5 Turbo',
		fuelConsumption: '7–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(5000),
		image: '/cars/honda-stepwagon.jpg',
		description: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –º–∏–Ω–∏–≤—ç–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–¥–≤–∏–∂–Ω—ã–º–∏ –¥–≤–µ—Ä—è–º–∏ Magic Slide. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å Honda –∏ –æ—Ç–ª–∏—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å.',
		features: ['8 –º–µ—Å—Ç', 'Magic Slide –¥–≤–µ—Ä–∏', '–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å Honda'],
		category: 'minivans',
		available: true,
		seats: createSeats(8),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 72
	},
	{
		id: 'mercedes-sprinter',
		name: 'Mercedes-Benz Sprinter 2022',
		class: '–ö–æ–º—Ñ–æ—Ä—Ç',
		engine: '2.2 Diesel',
		fuelConsumption: '8–ª/100–∫–º',
		year: createYear(2022),
		pricePerHour: createPrice(6000),
		image: '/cars/mercedes-sprinter.jpg',
		description: '–í–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–æ–ª–∫–æ–º –∏ –±–æ–ª—å—à–∏–º –±–∞–≥–∞–∂–Ω—ã–º –æ—Ç–¥–µ–ª–µ–Ω–∏–µ–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫, —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ö–æ–º—Ñ–æ—Ä—Ç –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å Mercedes-Benz.',
		features: ['20 –º–µ—Å—Ç', '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–í—ã—Å–æ–∫–∏–π –ø–æ—Ç–æ–ª–æ–∫', '–ë–æ–ª—å—à–æ–π –±–∞–≥–∞–∂–Ω–∏–∫'],
		category: 'minivans',
		available: true,
		seats: createSeats(20),
		transmission: 'automatic',
		fuelType: 'diesel',
		popularity: 70
	},
	{
		id: 'toyota-camry',
		name: 'Toyota Camry 2023',
		class: '–ö–æ–º—Ñ–æ—Ä—Ç',
		engine: '2.5 Hybrid',
		fuelConsumption: '5–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(5000),
		image: '/cars/toyota-camry.jpg',
		description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å–µ–¥–∞–Ω —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. Toyota Safety Sense –∏ –æ—Ç–ª–∏—á–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å.',
		features: ['5 –º–µ—Å—Ç', 'Hybrid —Å–∏—Å—Ç–µ–º–∞', 'Toyota Safety Sense', '–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å'],
		category: 'sedans',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'hybrid',
		popularity: 85
	},
	{
		id: 'toyota-harrier',
		name: 'Toyota Harrier 2023',
		class: '–ö–æ–º—Ñ–æ—Ä—Ç',
		engine: '2.0 Hybrid',
		fuelConsumption: '6–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(9000),
		image: '/cars/toyota-harrier.jpg',
		description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–π –∫—Ä—ã—à–µ–π. –°—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω, –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–∞ JBL –∏ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.',
		features: ['5 –º–µ—Å—Ç', 'Hybrid —Å–∏—Å—Ç–µ–º–∞', '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞', 'JBL –∞—É–¥–∏–æ'],
		category: 'suvs',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'hybrid',
		popularity: 80
	},
	
	// üåü –ü–†–ï–ú–ò–£–ú
	{
		id: 'toyota-crown',
		name: 'Toyota Crown 2022',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '2.5 Hybrid',
		fuelConsumption: '6–ª/100–∫–º',
		year: createYear(2022),
		pricePerHour: createPrice(8000),
		image: '/cars/toyota-crown.jpg',
		description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–µ–¥–∞–Ω —Å —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–æ–±–æ–≥–æ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. Toyota Safety Sense –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.',
		features: ['5 –º–µ—Å—Ç', 'Hybrid —Å–∏—Å—Ç–µ–º–∞', 'Toyota Safety Sense', '–ü—Ä–µ–º–∏—É–º –∫–æ–º—Ñ–æ—Ä—Ç'],
		category: 'sedans',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'hybrid',
		popularity: 75
	},
	{
		id: 'toyota-prado',
		name: 'Land Cruiser Prado 2022',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '2.8 Diesel',
		fuelConsumption: '8–ª/100–∫–º',
		year: createYear(2022),
		pricePerHour: createPrice(8000),
		image: '/cars/toyota-prado.jpg',
		description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ —Å —Å–∏—Å—Ç–µ–º–æ–π Multi-Terrain Select –∏ Crawl Control. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –ø–æ–µ–∑–¥–æ–∫ –ø–æ –±–µ–∑–¥–æ—Ä–æ–∂—å—é –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π. –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å Toyota –∏ 7-–º–µ—Å—Ç–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç.',
		features: ['7 –º–µ—Å—Ç', 'Multi-Terrain Select', 'Crawl Control', '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å Toyota'],
		category: 'suvs',
		available: true,
		seats: createSeats(7),
		transmission: 'automatic',
		fuelType: 'diesel',
		popularity: 85
	},
	{
		id: 'toyota-alphard-2014',
		name: 'Toyota Alphard 2014',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '3.5 V6',
		fuelConsumption: '11–ª/100–∫–º',
		year: createYear(2014),
		pricePerHour: createPrice(9000),
		image: '/cars/toyota-alphard-2014.jpg',
		description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π VIP-–º–∏–Ω–∏–≤—ç–Ω —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫—Ä–µ—Å–ª–∞–º–∏ –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–π –∫—Ä—ã—à–µ–π. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.',
		features: ['7 –º–µ—Å—Ç VIP', '–û—Ç–¥–µ–ª—å–Ω—ã–µ –∫—Ä–µ—Å–ª–∞', '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞', '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
		category: 'minivans',
		available: true,
		seats: createSeats(7),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 78
	},
	{
		id: 'lexus-rx-350',
		name: 'Lexus RX 350 2023',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '3.5 V6',
		fuelConsumption: '9–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(10000),
		image: '/cars/lexus-rx-350.jpg',
		description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä Lexus —Å –º–æ—â–Ω—ã–º V6 –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –ö–æ–º—Ñ–æ—Ä—Ç –±–µ–∑ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫.',
		features: ['5 –º–µ—Å—Ç', 'Lexus Safety System+', 'Mark Levinson –∞—É–¥–∏–æ', '–ü—Ä–µ–º–∏—É–º –∫–æ–º—Ñ–æ—Ä—Ç'],
		category: 'suvs',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 82
	},
	{
		id: 'lixiang-li9',
		name: 'Li Xiang Li9 2023',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '1.5T PHEV',
		fuelConsumption: '5–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(10000),
		image: '/cars/lixiang-li9.jpg',
		description: '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π PHEV —Å –º–∞—Ç—Ä–∏—á–Ω—ã–º–∏ —Ñ–∞—Ä–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–æ–π ADAS. –ë—É–¥—É—â–µ–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —É–∂–µ –∑–¥–µ—Å—å. –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–ø–ª–∏–≤–∞ –∏ –º–æ—â—å –≤ –æ–¥–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.',
		features: ['6 –º–µ—Å—Ç', 'Plug-in Hybrid', '–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ñ–∞—Ä—ã', 'ADAS —Å–∏—Å—Ç–µ–º–∞'],
		category: 'suvs',
		available: true,
		seats: createSeats(6),
		transmission: 'automatic',
		fuelType: 'hybrid',
		popularity: 85
	},
	{
		id: 'toyota-alphard',
		name: 'Toyota Alphard 2023',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '3.5 V6',
		fuelConsumption: '10–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(11000),
		image: '/cars/toyota-alphard.jpg',
		description: '–ù–æ–≤–µ–π—à–∏–π VIP-–º–∏–Ω–∏–≤—ç–Ω —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫—Ä–µ—Å–ª–∞–º–∏ –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–π –∫—Ä—ã—à–µ–π. –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–∞–ª–æ–Ω –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.',
		features: ['7 –º–µ—Å—Ç VIP', '–û—Ç–¥–µ–ª—å–Ω—ã–µ –∫—Ä–µ—Å–ª–∞', '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞', '–ü—Ä–µ–º–∏—É–º —Å–∞–ª–æ–Ω'],
		category: 'minivans',
		available: true,
		seats: createSeats(7),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 92
	},
	{
		id: 'mercedes-gl-400',
		name: 'Mercedes-Benz GL 400 2022',
		class: '–ü—Ä–µ–º–∏—É–º',
		engine: '3.0 V6 Turbo',
		fuelConsumption: '10–ª/100–∫–º',
		year: createYear(2022),
		pricePerHour: createPrice(10000),
		image: '/cars/mercedes-gl-400.jpg',
		description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –Ω–µ–º–µ—Ü–∫–∏–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ —Å —Å–∏—Å—Ç–µ–º–æ–π 4MATIC –∏ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≤–µ—Å–∫–æ–π AirMatic. –ù–µ–º–µ—Ü–∫–∞—è —Ä–æ—Å–∫–æ—à—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π –∏ VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫.',
		features: ['7 –º–µ—Å—Ç', '4MATIC —Å–∏—Å—Ç–µ–º–∞', 'AirMatic –ø–æ–¥–≤–µ—Å–∫–∞', '–ù–µ–º–µ—Ü–∫–∏–π –∫–æ–º—Ñ–æ—Ä—Ç'],
		category: 'suvs',
		available: true,
		seats: createSeats(7),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 78
	},
	
	// üíº –ë–ò–ó–ù–ï–°
	{
		id: 'mercedes-e200',
		name: 'Mercedes-Benz E200 2023',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '2.0 Turbo',
		fuelConsumption: '7–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(7000),
		image: '/cars/mercedes-e200.jpg',
		description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω Mercedes-Benz —Å —Å–∏—Å—Ç–µ–º–æ–π MBUX –∏ –Ω–µ–º–µ—Ü–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É—Å–ø–µ—Ö–∞. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.',
		features: ['5 –º–µ—Å—Ç', 'MBUX —Å–∏—Å—Ç–µ–º–∞', '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞', '–ù–µ–º–µ—Ü–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
		category: 'sedans',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 90
	},
	{
		id: 'lexus-lx-570',
		name: 'Lexus LX 570 2022',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '5.7 V8',
		fuelConsumption: '15–ª/100–∫–º',
		year: createYear(2022),
		pricePerHour: createPrice(13000),
		image: '/cars/lexus-lx-570.jpg',
		description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π Lexus LX 570 —Å –º–æ—â–Ω—ã–º V8 –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –∏ –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–æ–π Mark Levinson. –¶–∞—Ä—å –¥–æ—Ä–æ–≥ —Å VIP-—Å–∞–ª–æ–Ω–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π Multi-Terrain Monitor. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –∏ –ø—Ä–µ—Å—Ç–∏–∂ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤.',
		features: ['8 –º–µ—Å—Ç', 'Mark Levinson', 'Multi-Terrain Monitor', 'VIP —Å–∞–ª–æ–Ω'],
		category: 'suvs',
		available: true,
		seats: createSeats(8),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 88
	},
	{
		id: 'lexus-lx-570-2',
		name: 'Lexus LX 570 VIP 2023',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '5.7 V8',
		fuelConsumption: '15–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(14000),
		image: '/cars/lexus-lx-570-2.jpg',
		description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π Lexus LX 570 VIP —Å –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–π –∞—É–¥–∏–æ—Å–∏—Å—Ç–µ–º–æ–π Mark Levinson Premium. Ultimate luxury –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Ä–æ—Å–∫–æ—à–∏. Multi-Terrain Monitor –∏ VIP-—Å–∞–ª–æ–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞.',
		features: ['8 –º–µ—Å—Ç VIP', 'Mark Levinson Premium', 'Multi-Terrain Monitor', 'Ultimate luxury'],
		category: 'suvs',
		available: true,
		seats: createSeats(8),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 92
	},
	{
		id: 'lexus-lx',
		name: 'Lexus LX 600 2023',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '3.5 V6 Twin-Turbo',
		fuelConsumption: '13–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(14000),
		image: '/cars/lexus-lx.jpg',
		description: '–ù–æ–≤–µ–π—à–∏–π Lexus LX 600 —Å –º–æ—â–Ω—ã–º V6 Twin-Turbo –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º. –õ–µ–≥–µ–Ω–¥–∞ —è–ø–æ–Ω—Å–∫–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞ —Å off-road —Ä–µ–∂–∏–º–∞–º–∏ –∏ Multi-Terrain Monitor. VIP-—Å–∞–ª–æ–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –ø—Ä–µ—Å—Ç–∏–∂–∞.',
		features: ['7 –º–µ—Å—Ç', 'Off-road —Ä–µ–∂–∏–º—ã', 'Multi-Terrain Monitor', 'VIP —Å–∞–ª–æ–Ω'],
		category: 'suvs',
		available: true,
		seats: createSeats(7),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 95
	},
	{
		id: 'land-cruiser-300',
		name: 'Toyota Land Cruiser 300 2023',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '3.5 V6 Twin-Turbo',
		fuelConsumption: '11–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(14000),
		image: '/cars/land-cruiser-300.jpg',
		description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π Toyota Land Cruiser 300 —Å Twin-—Ç—É—Ä–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –∏ –ø–æ–ª–Ω—ã–º –ø—Ä–∏–≤–æ–¥–æ–º 4WD. –ö–æ—Ä–æ–ª—å –±–µ–∑–¥–æ—Ä–æ–∂—å—è –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π Multi-Terrain Select. –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–∞–ª–æ–Ω –¥–ª—è VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫.',
		features: ['7 –º–µ—Å—Ç', '–ü–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥ 4WD', 'Twin-—Ç—É—Ä–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å', 'Multi-Terrain Select'],
		category: 'suvs',
		available: true,
		seats: createSeats(7),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 98
	},
	{
		id: 'mercedes-s-450',
		name: 'Mercedes-Benz S450 2023',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '3.0 Turbo',
		fuelConsumption: '9–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(14000),
		image: '/cars/mercedes-s-450.jpg',
		description: 'Mercedes-Benz S450 - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–æ—Å–∫–æ—à—å –¥–ª—è VIP –ø–µ—Ä—Å–æ–Ω. –°–∏—Å—Ç–µ–º–∞ MBUX, –º–∞—Å—Å–∞–∂ —Å–∏–¥–µ–Ω–∏–π –∏ –ø–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ VIP-–ø–µ—Ä–µ–≤–æ–∑–æ–∫ –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.',
		features: ['5 –º–µ—Å—Ç', 'MBUX —Å–∏—Å—Ç–µ–º–∞', '–ú–∞—Å—Å–∞–∂ —Å–∏–¥–µ–Ω–∏–π', '–ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞'],
		category: 'sedans',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 95
	},
	{
		id: 'bmw-x5-m',
		name: 'BMW X5 M Performance 2023',
		class: '–ë–∏–∑–Ω–µ—Å',
		engine: '4.4 V8 Turbo',
		fuelConsumption: '12–ª/100–∫–º',
		year: createYear(2023),
		pricePerHour: createPrice(15000),
		image: '/cars/bmw-x5-m.jpg',
		description: 'BMW X5 M Performance —Å –º–æ—â–Ω—ã–º V8 Turbo –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π xDrive. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–æ—â—å –∏ –¥—Ä–∞–π–≤ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ª—é–∫—Å–æ–≤—ã–º –∫–æ–º—Ñ–æ—Ä—Ç–æ–º. M Power –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ª—é–∫—Å–∞.',
		features: ['5 –º–µ—Å—Ç', 'M Power', 'xDrive —Å–∏—Å—Ç–µ–º–∞', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –ª—é–∫—Å'],
		category: 'suvs',
		available: true,
		seats: createSeats(5),
		transmission: 'automatic',
		fuelType: 'gasoline',
		popularity: 90
	}
]

// –ö—ç—à –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
const cache = new Map<string, { data: unknown; timestamp: number }>()
const CACHE_TTL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
const isCacheValid = (key: string): boolean => {
	const cached = cache.get(key)
	if (!cached) return false
	
	const now = Date.now()
	return (now - cached.timestamp) < CACHE_TTL
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
const createOptimizedCarsData = (): CarsData => {
	const cacheKey = 'optimized_cars_data'
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as CarsData : createOptimizedCarsData()
	}
	
	const all = carsData
	const byCategory: Record<CarCategory, Car[]> = {
		sedans: all.filter(car => car.category === 'sedans'),
		suvs: all.filter(car => car.category === 'suvs'),
		minivans: all.filter(car => car.category === 'minivans')
	}
	
	const byClass: Record<CarClass, Car[]> = {
		'–ö–æ–º—Ñ–æ—Ä—Ç': all.filter(car => car.class === '–ö–æ–º—Ñ–æ—Ä—Ç'),
		'–ë–∏–∑–Ω–µ—Å': all.filter(car => car.class === '–ë–∏–∑–Ω–µ—Å'),
		'–ü—Ä–µ–º–∏—É–º': all.filter(car => car.class === '–ü—Ä–µ–º–∏—É–º')
	}
	
	const byPriceRange: Record<PriceRange, Car[]> = {
		budget: all.filter(car => car.pricePerHour < 5000),
		standard: all.filter(car => car.pricePerHour >= 5000 && car.pricePerHour < 8000),
		premium: all.filter(car => car.pricePerHour >= 8000 && car.pricePerHour < 12000),
		luxury: all.filter(car => car.pricePerHour >= 12000)
	}
	
	const byFuelType: Record<FuelType, Car[]> = {
		gasoline: all.filter(car => car.fuelType === 'gasoline'),
		diesel: all.filter(car => car.fuelType === 'diesel'),
		hybrid: all.filter(car => car.fuelType === 'hybrid'),
		electric: all.filter(car => car.fuelType === 'electric')
	}
	
	const byTransmission: Record<TransmissionType, Car[]> = {
		automatic: all.filter(car => car.transmission === 'automatic'),
		manual: all.filter(car => car.transmission === 'manual')
	}
	
	// –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	const prices = all.map(car => car.pricePerHour)
	const availableCars = all.filter(car => car.available)
	const popularCars = [...all].sort((a, b) => (b.popularity || 0) - (a.popularity || 0)).slice(0, 5)
	const leastPopularCars = [...all].sort((a, b) => (a.popularity || 0) - (b.popularity || 0)).slice(0, 3)
	
	const statistics: CarsStatistics = {
		total: all.length,
		available: availableCars.length,
		byCategory: {
			sedans: byCategory.sedans.length,
			suvs: byCategory.suvs.length,
			minivans: byCategory.minivans.length
		},
		byClass: {
			'–ö–æ–º—Ñ–æ—Ä—Ç': byClass['–ö–æ–º—Ñ–æ—Ä—Ç'].length,
			'–ë–∏–∑–Ω–µ—Å': byClass['–ë–∏–∑–Ω–µ—Å'].length,
			'–ü—Ä–µ–º–∏—É–º': byClass['–ü—Ä–µ–º–∏—É–º'].length
		},
		byFuelType: {
			gasoline: byFuelType.gasoline.length,
			diesel: byFuelType.diesel.length,
			hybrid: byFuelType.hybrid.length,
			electric: byFuelType.electric.length
		},
		byTransmission: {
			automatic: byTransmission.automatic.length,
			manual: byTransmission.manual.length
		},
		averagePrice: prices.reduce((sum, price) => sum + price, 0) / prices.length,
		priceRange: {
			min: Math.min(...prices),
			max: Math.max(...prices)
		},
		popularity: {
			mostPopular: popularCars,
			leastPopular: leastPopularCars
		},
		maintenance: {
			needsService: 0, // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
			excellent: all.length,
			good: 0
		}
	}
	
	const result: CarsData = {
		all,
		byCategory,
		byClass,
		byPriceRange,
		byFuelType,
		byTransmission,
		statistics,
		cache: {
			lastUpdated: new Date(),
			version: '2.0.0'
		}
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
	cache.set(cacheKey, {
		data: result as unknown,
		timestamp: Date.now()
	})
	
	return result
}

// –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
export const carsDataOptimized = createOptimizedCarsData()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const cars = carsDataOptimized.all

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
export const getCarsByCategory = (category: CarCategory): Car[] => {
	const cacheKey = `cars_by_category_${category}`
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car[] : []
	}
	
	if (!carsDataOptimized) return []
	const result = carsDataOptimized.byCategory[category]
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

export const getCarsByClass = (carClass: CarClass): Car[] => {
	const cacheKey = `cars_by_class_${carClass}`
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car[] : []
	}
	
	if (!carsDataOptimized) return []
	const result = carsDataOptimized.byClass[carClass]
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

export const getCarsByPriceRange = (range: PriceRange): Car[] => {
	const cacheKey = `cars_by_price_${range}`
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car[] : []
	}
	
	if (!carsDataOptimized) return []
	const result = carsDataOptimized.byPriceRange[range]
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

export const getCarsByFuelType = (fuelType: FuelType): Car[] => {
	const cacheKey = `cars_by_fuel_${fuelType}`
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car[] : []
	}
	
	if (!carsDataOptimized) return []
	const result = carsDataOptimized.byFuelType[fuelType]
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

export const getAvailableCars = (): Car[] => {
	const cacheKey = 'available_cars'
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car[] : []
	}
	
	if (!carsDataOptimized) return []
	const result = carsDataOptimized.all.filter(car => car.available)
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

export const getCarsBySeats = (seats: number): Car[] => {
	const cacheKey = `cars_by_seats_${seats}`
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car[] : []
	}
	
	if (!carsDataOptimized) return []
	const result = carsDataOptimized.all.filter(car => car.seats >= seats)
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const getSedans = () => getCarsByCategory('sedans')
export const getSUVs = () => getCarsByCategory('suvs')
export const getMinivans = () => getCarsByCategory('minivans')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const getCarsStatistics = (): CarsStatistics => {
	if (!carsDataOptimized) return {
		total: 0,
		available: 0,
		byCategory: { sedans: 0, suvs: 0, minivans: 0 },
		byClass: { '–ö–æ–º—Ñ–æ—Ä—Ç': 0, '–ë–∏–∑–Ω–µ—Å': 0, '–ü—Ä–µ–º–∏—É–º': 0 },
		byFuelType: { gasoline: 0, diesel: 0, hybrid: 0, electric: 0 },
		byTransmission: { automatic: 0, manual: 0 },
		averagePrice: 0,
		priceRange: { min: 0, max: 0 },
		popularity: { mostPopular: [], leastPopular: [] },
		maintenance: { needsService: 0, excellent: 0, good: 0 }
	}
	return carsDataOptimized.statistics
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
export const getCarById = (id: string): Car | undefined => {
	const cacheKey = `car_by_id_${id}`
	
	if (isCacheValid(cacheKey)) {
		const cached = cache.get(cacheKey)
		return cached ? cached.data as Car | undefined : undefined
	}
	
	if (!carsDataOptimized) return undefined
	const result = carsDataOptimized.all.find(car => car.id === id)
	
	cache.set(cacheKey, {
		data: result,
		timestamp: Date.now()
	})
	
	return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export const clearCache = (): void => {
	cache.clear()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
export const getCacheSize = (): number => {
	return cache.size
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
export const getPopularCars = (limit: number = 5): Car[] => {
	if (!carsDataOptimized) return []
	return carsDataOptimized.statistics.popularity.mostPopular.slice(0, limit)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
export const getCarsByPopularity = (minPopularity: number = 0): Car[] => {
	if (!carsDataOptimized) return []
	return carsDataOptimized.all.filter(car => (car.popularity || 0) >= minPopularity)
} 