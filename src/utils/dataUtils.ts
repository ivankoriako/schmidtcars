import { 
	Car, 
	CarFilters, 
	SortOption, 
	SearchOptions, 
	PaginationOptions,
	FuelType,
	TransmissionType,
	CarClass,
	CarCategory,
	PriceRange,
	CacheOptions,
	ApiResponse
} from '@/types'

// –ö—ç—à –¥–ª—è –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
const cache = new Map<string, { data: unknown; timestamp: number }>()
const CACHE_TTL = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
const isCacheValid = (key: string): boolean => {
	const cached = cache.get(key)
	if (!cached) return false
	
	const now = Date.now()
	return (now - cached.timestamp) < CACHE_TTL
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à
const setCache = (key: string, data: unknown): void => {
	cache.set(key, {
		data,
		timestamp: Date.now()
	})
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
const getCache = <T>(key: string): T | null => {
	if (isCacheValid(key)) {
		const cached = cache.get(key)
		return cached ? cached.data as T : null
	}
	return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
export const filterCars = (cars: Car[], filters: CarFilters): Car[] => {
	const cacheKey = `filter_cars_${JSON.stringify(filters)}_${cars.length}`
	
	const cached = getCache<Car[]>(cacheKey)
	if (cached) return cached
	
	const filtered = cars.filter(car => {
		// –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		if (filters.category && car.category !== filters.category) {
			return false
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
		if (filters.class && car.class !== filters.class) {
			return false
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
		if (filters.priceRange) {
			const { min, max } = filters.priceRange
			if (car.pricePerHour < min || car.pricePerHour > max) {
				return false
			}
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—Ç
		if (filters.seats && car.seats < filters.seats) {
			return false
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
		if (filters.available !== undefined && car.available !== filters.available) {
			return false
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
		if (filters.fuelType && car.fuelType !== filters.fuelType) {
			return false
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
		if (filters.transmission && car.transmission !== filters.transmission) {
			return false
		}
		
		// –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
		if (filters.year) {
			const { min, max } = filters.year
			if (car.year < min || car.year > max) {
				return false
			}
		}
		
		return true
	})
	
	setCache(cacheKey, filtered)
	return filtered
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
export const sortCars = (cars: Car[], sortOption: SortOption): Car[] => {
	const cacheKey = `sort_cars_${sortOption}_${cars.length}`
	
	const cached = getCache<Car[]>(cacheKey)
	if (cached) return cached
	
	const sortedCars = [...cars]
	
	switch (sortOption) {
		case 'price-asc':
			sortedCars.sort((a, b) => a.pricePerHour - b.pricePerHour)
			break
		case 'price-desc':
			sortedCars.sort((a, b) => b.pricePerHour - a.pricePerHour)
			break
		case 'year-desc':
			sortedCars.sort((a, b) => b.year - a.year)
			break
		case 'name-asc':
			sortedCars.sort((a, b) => a.name.localeCompare(b.name))
			break
		case 'popularity':
			sortedCars.sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
			break
		case 'seats-asc':
			sortedCars.sort((a, b) => a.seats - b.seats)
			break
		case 'seats-desc':
			sortedCars.sort((a, b) => b.seats - a.seats)
			break
		default:
			// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
			sortedCars.sort((a, b) => (b.popularity || 0) - (a.popularity || 0))
	}
	
	setCache(cacheKey, sortedCars)
	return sortedCars
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
export const searchCars = (cars: Car[], query: string): Car[] => {
	if (!query.trim()) return cars
	
	const cacheKey = `search_cars_${query.toLowerCase()}_${cars.length}`
	
	const cached = getCache<Car[]>(cacheKey)
	if (cached) return cached
	
	const searchTerm = query.toLowerCase()
	
	const results = cars.filter(car => {
		return (
			car.name.toLowerCase().includes(searchTerm) ||
			car.class.toLowerCase().includes(searchTerm) ||
			car.engine.toLowerCase().includes(searchTerm) ||
			car.features.some(feature => 
				feature.toLowerCase().includes(searchTerm)
			) ||
			car.category.toLowerCase().includes(searchTerm) ||
			car.fuelType.toLowerCase().includes(searchTerm) ||
			car.transmission.toLowerCase().includes(searchTerm) ||
			car.year.toString().includes(searchTerm) ||
			car.pricePerHour.toString().includes(searchTerm) ||
			car.seats.toString().includes(searchTerm)
		)
	})
	
	setCache(cacheKey, results)
	return results
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
export const paginateCars = (
	cars: Car[], 
	pagination: PaginationOptions
): { cars: Car[], pagination: PaginationOptions } => {
	const { page, limit } = pagination
	const startIndex = (page - 1) * limit
	const endIndex = startIndex + limit
	
	const result = {
		cars: cars.slice(startIndex, endIndex),
		pagination: {
			...pagination,
			total: cars.length
		}
	}
	
	return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π
export const searchAndFilterCars = (
	cars: Car[],
	options: SearchOptions
): { cars: Car[], pagination: PaginationOptions } => {
	const cacheKey = `search_and_filter_${JSON.stringify(options)}_${cars.length}`
	
	const cached = getCache<{ cars: Car[], pagination: PaginationOptions }>(cacheKey)
	if (cached) return cached
	
	let filteredCars = cars
	
	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
	if (options.query) {
		filteredCars = searchCars(filteredCars, options.query)
	}
	
	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
	filteredCars = filterCars(filteredCars, options.filters)
	
	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
	filteredCars = sortCars(filteredCars, options.sort)
	
	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
	const result = paginateCars(filteredCars, options.pagination)
	
	setCache(cacheKey, result)
	return result
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
export const getUniqueValues = <T>(cars: Car[], field: keyof Car): T[] => {
	const cacheKey = `unique_values_${String(field)}_${cars.length}`
	
	const cached = getCache<T[]>(cacheKey)
	if (cached) return cached
	
	const values = cars.map(car => car[field])
	const uniqueValues = [...new Set(values)] as T[]
	
	setCache(cacheKey, uniqueValues)
	return uniqueValues
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
export const getFilteredStatistics = (cars: Car[]) => {
	if (cars.length === 0) {
		return {
			total: 0,
			available: 0,
			averagePrice: 0,
			priceRange: { min: 0, max: 0 },
			byClass: {},
			byCategory: {},
			byFuelType: {},
			byTransmission: {},
			popularity: {
				mostPopular: [],
				leastPopular: []
			}
		}
	}
	
	const prices = cars.map(car => car.pricePerHour)
	const availableCars = cars.filter(car => car.available)
	
	const byClass = cars.reduce((acc, car) => {
		acc[car.class] = (acc[car.class] || 0) + 1
		return acc
	}, {} as Record<CarClass, number>)
	
	const byCategory = cars.reduce((acc, car) => {
		acc[car.category] = (acc[car.category] || 0) + 1
		return acc
	}, {} as Record<CarCategory, number>)
	
	const byFuelType = cars.reduce((acc, car) => {
		acc[car.fuelType] = (acc[car.fuelType] || 0) + 1
		return acc
	}, {} as Record<FuelType, number>)
	
	const byTransmission = cars.reduce((acc, car) => {
		acc[car.transmission] = (acc[car.transmission] || 0) + 1
		return acc
	}, {} as Record<TransmissionType, number>)
	
	const popularCars = [...cars].sort((a, b) => (b.popularity || 0) - (a.popularity || 0)).slice(0, 5)
	const leastPopularCars = [...cars].sort((a, b) => (a.popularity || 0) - (b.popularity || 0)).slice(0, 3)
	
	return {
		total: cars.length,
		available: availableCars.length,
		averagePrice: prices.reduce((sum, price) => sum + price, 0) / prices.length,
		priceRange: {
			min: Math.min(...prices),
			max: Math.max(...prices)
		},
		byClass,
		byCategory,
		byFuelType,
		byTransmission,
		popularity: {
			mostPopular: popularCars,
			leastPopular: leastPopularCars
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
export const getCarClassLabel = (carClass: CarClass): string => {
	const labels: Record<CarClass, string> = {
		'–ö–æ–º—Ñ–æ—Ä—Ç': '–ö–æ–º—Ñ–æ—Ä—Ç',
		'–ë–∏–∑–Ω–µ—Å': '–ë–∏–∑–Ω–µ—Å',
		'–ü—Ä–µ–º–∏—É–º': '–ü—Ä–µ–º–∏—É–º',
		'–õ—é–∫—Å': '–õ—é–∫—Å'
	}
	return labels[carClass]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
export const getCarCategoryLabel = (category: CarCategory): string => {
	const labels: Record<CarCategory, string> = {
		'sedans': '–°–µ–¥–∞–Ω—ã',
		'suvs': '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏',
		'minivans': '–ú–∏–Ω–∏–≤—ç–Ω—ã'
	}
	return labels[category]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
export const getFuelTypeColor = (fuelType: FuelType): string => {
	const colors: Record<FuelType, string> = {
		'gasoline': 'text-red-400',
		'diesel': 'text-blue-400',
		'hybrid': 'text-green-400',
		'electric': 'text-purple-400'
	}
	return colors[fuelType]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
export const getFuelTypeIcon = (fuelType: FuelType): string => {
	const icons: Record<FuelType, string> = {
		'gasoline': '‚õΩ',
		'diesel': '‚õΩ',
		'hybrid': 'üîã',
		'electric': '‚ö°'
	}
	return icons[fuelType]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
export const getTransmissionIcon = (transmission: TransmissionType): string => {
	const icons: Record<TransmissionType, string> = {
		'automatic': 'üîÑ',
		'manual': '‚öôÔ∏è'
	}
	return icons[transmission]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
export const getPriceRangeColor = (range: PriceRange): string => {
	const colors: Record<PriceRange, string> = {
		'budget': 'text-green-600',
		'standard': 'text-blue-600',
		'premium': 'text-purple-600',
		'luxury': 'text-red-600'
	}
	return colors[range]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
export const getPriceRangeLabel = (range: PriceRange): string => {
	const labels: Record<PriceRange, string> = {
		'budget': '–≠–∫–æ–Ω–æ–º',
		'standard': '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
		'premium': '–ü—Ä–µ–º–∏—É–º',
		'luxury': '–õ—é–∫—Å'
	}
	return labels[range]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
export const getCarPriceRange = (price: number): PriceRange => {
	if (price < 5000) return 'budget'
	if (price < 8000) return 'standard'
	if (price < 12000) return 'premium'
	return 'luxury'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API –æ—Ç–≤–µ—Ç–∞
export const createApiResponse = <T>(
	data: T,
	success: boolean = true,
	message?: string,
	errors?: string[]
): ApiResponse<T> => {
	return {
		data,
		success,
		message,
		errors,
		timestamp: new Date()
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
export const clearDataCache = (): void => {
	cache.clear()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
export const getDataCacheSize = (): number => {
	return cache.size
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
export const getDataCacheStats = () => {
	const entries = Array.from(cache.entries())
	const now = Date.now()
	
	const validEntries = entries.filter(([_, value]) => 
		(now - value.timestamp) < CACHE_TTL
	)
	
	return {
		total: entries.length,
		valid: validEntries.length,
		expired: entries.length - validEntries.length,
		ttl: CACHE_TTL
	}
} 